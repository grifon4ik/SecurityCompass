#!/bin/bash

# Check if Helm, Trivy, jq, and yq are installed
command -v helm >/dev/null 2>&1 || { echo >&2 "Helm is required but it's not installed. Aborting."; exit 1; }
command -v trivy >/dev/null 2>&1 || { echo >&2 "Trivy is required but it's not installed. Aborting."; exit 1; }
command -v jq >/dev/null 2>&1 || { echo >&2 "jq is required but it's not installed. Aborting."; exit 1; }
command -v yq >/dev/null 2>&1 || { echo >&2 "yq is required but it's not installed. Aborting."; exit 1; }

# Function to display usage
usage() {
    echo "Usage: $0 <chart_name_with_version>"
    echo "Example: $0 jenkins/jenkins:3.0.0"
    exit 1
}

# Check for correct number of arguments
if [ "$#" -ne 1 ]; then
    usage
fi

CHART_NAME=$1

# Extract the chart name and version from the input (chart_name:version)
CHART_NAME_ONLY=$(echo "$CHART_NAME" | cut -d':' -f1)
CHART_VERSION=$(echo "$CHART_NAME" | cut -d':' -f2)

# Template the chart values and extract container images using yq
if [ -z "$CHART_VERSION" ]; then
    echo "No version specified, using the latest version of the chart."
    helm template "$CHART_NAME_ONLY" | yq e '.. | select(has("image")) | .image' - > images.txt
else
    echo "Extracting container images from Helm chart: $CHART_NAME (version: $CHART_VERSION)..."
    helm template "$CHART_NAME_ONLY" --version "$CHART_VERSION" | yq e '.. | select(has("image")) | .image' - > images.txt
fi

# Check if the images file has content
if [ ! -s images.txt ]; then
    echo "No container images found in the Helm chart."
    exit 1
fi

# Remove duplicate images from the list
sort -u images.txt -o images.txt

# Print the list of images being scanned
echo "The following container images will be scanned for vulnerabilities:"
cat images.txt

# Process each image
while IFS= read -r IMAGE; do
    # Skip empty lines
    if [ -z "$IMAGE" ]; then
        continue
    fi

    # Sanitize the image name to create a safe file name for the CSV
    SAFE_IMAGE_NAME=$(echo "$IMAGE" | sed 's/[:\/]/_/g')
    OUTPUT_FILE="$(date +%Y-%m-%d_%H:%M:%S)_${SAFE_IMAGE_NAME}_vulnerabilities.csv"

    # Check if the file already exists (avoid duplicates)
    if [ -f "$OUTPUT_FILE" ]; then
        echo "File $OUTPUT_FILE already exists. Skipping."
        continue
    fi

    # Add header to the CSV file
    echo "image:tag,component/library,vulnerability,severity" > "$OUTPUT_FILE"

    # Perform Trivy vulnerability scan on the image
    echo "Scanning image: $IMAGE for vulnerabilities..."
    trivy image --severity MEDIUM,HIGH,CRITICAL --format json "$IMAGE" |
        jq -r '.Results[].Vulnerabilities[] | "\(.PkgName),\(.VulnerabilityID),\(.Severity)"' |
        awk -v img="$IMAGE" -F, '{print img "," $0}' >> "$OUTPUT_FILE"

    # Check if the output file was created and show the result
    if [ -s "$OUTPUT_FILE" ]; then
        echo "Vulnerabilities found and saved to: $OUTPUT_FILE"
    else
        echo "No vulnerabilities found for image: $IMAGE"
        rm -f "$OUTPUT_FILE" # Remove empty file
    fi
done < images.txt

# Clean up temporary file
rm -f images.txt
